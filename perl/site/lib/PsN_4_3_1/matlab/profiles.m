clear;

% ---------- Parameters for the plots ----------

rows    = 3;				% Number of rows in each figure
columns = 2;				% Number of columns
polynomial = 3; 			% Degree of polynomial for
                                        % fitting Y = f(ln(X))
prediction_steps = 100;			% The number of prediction
                                        % steps in the plotted interval
extrapolate = 0.1;			% Extrapolate this much
                                        % outside the available
                                        % data points
text_offset = 0.2;			% The text below each graph
                                        % will be placed this far
                                        % below the X-axis.

% ---------- Autogenerated code below ----------

str_format = '%30s';

col_names = [ sprintf(str_format,'par1');
	      sprintf(str_format,'par2');
	      sprintf(str_format,'par3');
	      sprintf(str_format,'par4');
	      sprintf(str_format,'par5');
	      sprintf(str_format,'par6');
	      sprintf(str_format,'par7');
	      sprintf(str_format,'par8');
	      sprintf(str_format,'par9');
	      sprintf(str_format,'par10');
	      sprintf(str_format,'par11');
	      sprintf(str_format,'par12');
	      sprintf(str_format,'par13')];

goal = 3.84;

filename = 'llp_rr.csv';

% ---------- End autogenerated code ----------

% The rest of the code does not change between runs

profiling_log = load(filename);

[a, b]           = size( profiling_log );

orig_est         = profiling_log(1,1:2:b);
orig_low         = profiling_log(2,1:2:b);
orig_upp         = profiling_log(3,1:2:b);

[junk, n_par]    = size( orig_est );

delta_ofv        = profiling_log(:,2:2:b);
fixed_values     = profiling_log(:,1:2:b);
fixed_lower      = profiling_log(2:2:a,1:2:b);
fixed_upper      = profiling_log(3:2:a,1:2:b);
log_fixed_values = log( fixed_values );


% Loop over all parameters, creating plots
row = 1;
col = 1;
for i = 1:n_par,
  % Plot and subplot handling
  if col == (columns+1)
    col = 1;
    row = row + 1;
  end
  if row == (rows+1) || i == 1
    h  = figure;
    col = 1;
    row = 1;
  end
  
  % prepare fit
  if min(fixed_values(:,i)) <= 0 & max(fixed_values(:,i)) >= 0
    X = fixed_values(:,i);
  else 
    X = log_fixed_values(:,i);
  end
  x_nolog = fixed_values(:,i);
  Y = delta_ofv(:,i);
  idx = isnan(X) | isnan(Y); 		% remove NaN's
  X = X(~idx);
  x_nolog = x_nolog(~idx);
  Y = Y(~idx);
  
  % Fit the polynomial
  P = polyfit( X, Y, polynomial);
  
  % Prepare the prediction
  x_max = max( x_nolog );
  x_min = min( x_nolog );
  extra = ( x_max - x_min ) * extrapolate;
  X_pred_max = x_max + extra;
  X_pred_min = x_min - extra;
  X_pred = X_pred_min:(X_pred_max-X_pred_min)/prediction_steps:X_pred_max;
  
  % Predict profile
  if min(fixed_values(:,i)) <= 0 & max(fixed_values(:,i)) >= 0
    pred_Y = polyval( P, X_pred );
  else 
    pred_Y = polyval( P, log(X_pred) );
  end
  
  % Prepare plot
  nplot = col+(row-1)*columns;
  subplot(rows, columns, nplot);
  
  % Plot the gathered profile
  plot( x_nolog, Y, 'o' );
  hold on;
  
  % Plot the predicted profile
  plot( X_pred, pred_Y );
  
  ax = axis;
  % Add line for maximum likelihood estimate 
  h = line( [orig_est(i), orig_est(i)], ax(3:4) );

  % Add lines for the lower and upper confidence limits based on
  % the standard errors
  h = line( [orig_low(i), orig_low(i)], ax(3:4) );
  set(h, 'LineStyle', '--' );
  h = line( [orig_upp(i), orig_upp(i)], ax(3:4) );
  set(h, 'LineStyle', '--' );
  
  % Add lines for the lower and upper confidence limits as the are
  % determined by the log-likelihood profiling tool 
  lower = fixed_lower(:,i);
  idx = isnan( lower );
  lower = lower(~idx);
  lower = lower(length(lower));
  h = line( [lower, lower], ax(3:4) );
  upper = fixed_upper(:,i);
  idx = isnan( upper );
  upper = upper(~idx);
  upper = upper(length(upper));
  h =line([upper, upper], ax(3:4));
  
  % Add a reference line for the ofv increase
  h = line( ax(1:2),[goal, goal]);
  
  % ----------- Add some text and figures ----------
  
  % Maximum likelihood estimate
  y_text = ax(3) - (ax(4)-ax(3))*text_offset;
  text( orig_est(i), y_text, num2str(orig_est(i)) );

  % upper SE confidence limit
  y_text = ax(3) - (ax(4)-ax(3))*text_offset*2/3;
  text( orig_upp(i), y_text, num2str(orig_upp(i)) );

  % lower SE confidence limit
  text( orig_low(i), y_text, num2str(orig_low(i)) );
  
  % Upper likelihood-profiling confidence limit
  y_text = ax(3) - (ax(4)-ax(3))*text_offset;
  text( upper, y_text, num2str(upper) );
  
  % Lower likelihood-profiling confidence limit
  text( lower, y_text, num2str(lower) );
  
  hold off;

  % Add title to each graph
  title( col_names( i, : ) );
  
  col = col + 1;
end



